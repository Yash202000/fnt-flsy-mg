{"version":3,"file":"main.js","mappings":"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","sources":["webpack:///external commonjs \"@nestjs/common\"","webpack:///external commonjs \"@nestjs/core\"","webpack:///external node-commonjs \"path\"","webpack:///external commonjs \"@nestjs/swagger\"","webpack:///./src/app/app.module.ts","webpack:///external commonjs \"tslib\"","webpack:///./src/app/app.controller.ts","webpack:///./src/app/core/auth/auth.guard.ts","webpack:///./src/app/core/auth/auth.service.ts","webpack:///../../libs/prisma-client-mygate/src/index.ts","webpack:///../../libs/prisma-client-mygate/src/lib/prisma.service.ts","webpack:///external commonjs \"@prisma/client/mygate\"","webpack:///../../libs/prisma-client-mygate/src/lib/prisma-client-mygate.module.ts","webpack:///external commonjs \"@nestjs/config\"","webpack:///external commonjs \"bcrypt\"","webpack:///./src/app/core/consts/env.consts.ts","webpack:///external commonjs \"@nestjs/jwt\"","webpack:///external commonjs \"jsonwebtoken\"","webpack:///./src/app/app.service.ts","webpack:///./src/app/devices/devices.module.ts","webpack:///./src/app/devices/devices.controller.ts","webpack:///./src/app/devices/devices.service.ts","webpack:///./src/app/mainflux/mainflux.service.ts","webpack:///external commonjs \"axios\"","webpack:///external commonjs \"mqtt\"","webpack:///./src/app/devices/dto/device.dto.ts","webpack:///./src/app/core/auth/user-auth.guard.ts","webpack:///./src/app/mainflux/mainflux.module.ts","webpack:///./src/app/core/auth/auth.module.ts","webpack:///./src/app/mygate-cards/mygate-cards.module.ts","webpack:///./src/app/mygate-cards/mygate-cards.controller.ts","webpack:///./src/app/mygate-cards/mygate-cards.service.ts","webpack:///./src/app/mygate-cards/dto/mygate-card.dto.ts","webpack:///./src/app/mygate/mygate.module.ts","webpack:///./src/app/mygate/mygate.service.ts","webpack:///external commonjs \"@nestjs/schedule\"","webpack:///./src/app/mygate/mygate.controller.ts","webpack:///./src/app/mygate-logs/mygate-logs.module.ts","webpack:///./src/app/mygate-logs/mygate-logs.controller.ts","webpack:///./src/app/mygate-logs/mygate-logs.service.ts","webpack:///./src/app/mygate-logs/dto/mygate-log.dto.ts","webpack:///./src/app/communication/communication.module.ts","webpack:///./src/app/communication/communication.controller.ts","webpack:///./src/app/communication/communication.service.ts","webpack:///./src/app/core/dto/access-notify.dto.ts","webpack:///./src/app/communication/dto/communication.dto.ts","webpack:///./src/app/core/dto/access-sync.dto.ts","webpack:///./src/app/core/dto/access-sync-ack.dto.ts","webpack:///./src/app/users/user.module.ts","webpack:///./src/app/users/user.controller.ts","webpack:///./src/app/users/dto/user.dto.ts","webpack:///external commonjs \"class-validator\"","webpack:///./src/app/users/user.service.ts","webpack:///external commonjs \"@prisma/client/runtime/library\"","webpack:///webpack/bootstrap","webpack:///./src/main.ts"],"sourcesContent":["module.exports = require(\"@nestjs/common\");","module.exports = require(\"@nestjs/core\");","module.exports = require(\"path\");","module.exports = require(\"@nestjs/swagger\");","import { Module } from '@nestjs/common';\r\nimport { AppController } from './app.controller';\r\nimport { AppService } from './app.service';\r\nimport { DevicesModule } from './devices/devices.module';\r\nimport { MyGateCardsModule } from './mygate-cards/mygate-cards.module';\r\nimport { MyGateModule } from './mygate/mygate.module';\r\nimport { ConfigModule } from '@nestjs/config';\r\nimport { ScheduleModule } from '@nestjs/schedule';\r\nimport { MainFluxModule } from './mainflux/mainflux.module';\r\nimport { MyGateLogsModule } from './mygate-logs/mygate-logs.module';\r\nimport { PrismaClientMygateModule } from '@fnt-flsy/prisma-client-mygate';\r\nimport { MyGateLogsService } from './mygate-logs/mygate-logs.service';\r\nimport { MyGateService } from './mygate/mygate.service';\r\nimport { MainFluxService } from './mainflux/mainflux.service';\r\nimport { AuthModule } from './core/auth/auth.module';\r\nimport { AuthService } from './core/auth/auth.service';\r\nimport { CommunicationModule } from './communication/communication.module';\r\n\r\nimport { UserModule } from './users/user.module';\r\nimport { JwtModule } from '@nestjs/jwt';\r\n\r\n@Module({\r\n  imports: [\r\n    ConfigModule.forRoot(),\r\n    ScheduleModule.forRoot(),\r\n    DevicesModule,\r\n    MyGateCardsModule,\r\n    MyGateModule,\r\n    MainFluxModule,\r\n    MyGateLogsModule,\r\n    PrismaClientMygateModule,\r\n    AuthModule,\r\n    CommunicationModule,\r\n    UserModule,\r\n    JwtModule\r\n    \r\n  ],\r\n  controllers: [AppController],\r\n  providers: [\r\n    AppService,\r\n    MyGateLogsService,\r\n    MyGateService,\r\n    MainFluxService,\r\n    AuthService,\r\n  ],\r\n})\r\nexport class AppModule {}\r\n","module.exports = require(\"tslib\");","import { Controller, UseGuards } from '@nestjs/common';\r\nimport { AuthGuard } from './core/auth/auth.guard';\r\n\r\n@UseGuards(AuthGuard)\r\n@Controller()\r\nexport class AppController {}\r\n","import { CanActivate, ExecutionContext, Injectable } from '@nestjs/common';\r\nimport { Observable } from 'rxjs';\r\nimport { AuthService } from './auth.service';\r\n\r\n@Injectable()\r\nexport class AuthGuard implements CanActivate {\r\n  constructor(private readonly authService: AuthService) {}\r\n\r\n  canActivate(\r\n    context: ExecutionContext\r\n  ): boolean | Promise<boolean> | Observable<boolean> {\r\n    const request = context.switchToHttp().getRequest();\r\n    return this.authService.validateDeviceRequest(request);\r\n  }\r\n}\r\n","import { PrismaService } from '@fnt-flsy/prisma-client-mygate';\r\nimport { ForbiddenException, HttpException, HttpStatus, Injectable } from '@nestjs/common';\r\nimport { ConfigService } from '@nestjs/config';\r\nimport * as bcrypt from 'bcrypt';\r\nimport { DASHBOARD_API_KEY } from '../consts/env.consts';\r\nimport { JwtService } from '@nestjs/jwt';\r\nimport * as jwt from 'jsonwebtoken';\r\n\r\ninterface  IUserAuthenticatePayload {\r\n  name: string,\r\n  email: string,\r\n  iat: number,\r\n  exp: number\r\n}\r\n\r\n\r\n@Injectable()\r\nexport class AuthService {\r\n  constructor(\r\n    private readonly configService: ConfigService,\r\n    private prismaService: PrismaService,\r\n    private jwt :JwtService\r\n  ) {}\r\n\r\n  async hashPassword(password: string): Promise<string> {\r\n    const saltRounds = Number(\r\n      this.configService.get<number>('bcrypt.saltRounds')\r\n    );\r\n    return await bcrypt.hash(password, saltRounds);\r\n  }\r\n\r\n  comparePasswords(\r\n    plainPassword: string,\r\n    hashedPassword: string\r\n  ): Promise<boolean> {\r\n    return bcrypt.compare(plainPassword, hashedPassword);\r\n  }\r\n\r\n  async validateDeviceRequest(request: any) {\r\n    const deviceId = request.params.deviceId;\r\n    const device = await this.prismaService.device.findFirst({\r\n      where: {\r\n        deviceId: deviceId,\r\n      },\r\n    });\r\n    if (!device) {\r\n      return false;\r\n    }\r\n    if (device.isDeviceKeyExempt) {\r\n      return true;\r\n    }\r\n    const deviceKey = request.headers['device-key'];\r\n    const device_Id = request.headers['device-id'];\r\n    if (\r\n      deviceKey == undefined ||\r\n      device_Id == undefined ||\r\n      device_Id != deviceId\r\n    ) {\r\n      return false;\r\n    }\r\n    return await this.comparePasswords(deviceKey, device.deviceKey);\r\n  }\r\n\r\n  async validateBearerToken( request :any ){\r\n    const authheader = request.headers.authorization;\r\n    if(!authheader){\r\n      throw new HttpException('Auth header is missing',HttpStatus.UNAUTHORIZED)\r\n    }\r\n    const secret = this.configService.get('USER_TOKEN')\r\n\r\n    if(authheader && authheader.startsWith('Bearer ')){\r\n      \r\n\r\n      const token = authheader.split(' ')[1];\r\n      \r\n      try {\r\n        \r\n        const decoded = jwt.verify(token, secret);\r\n        const decodedJSONString = JSON.stringify(decoded);\r\n      \r\n        const finaldata  : IUserAuthenticatePayload =  JSON.parse(decodedJSONString);\r\n        \r\n          const user = await this.prismaService.user.findFirst({\r\n            where:{\r\n              email : finaldata.email\r\n            }\r\n          })\r\n          if(!user){\r\n            throw new ForbiddenException(\"Invalid Token\")\r\n          }\r\n          return true;\r\n           \r\n\r\n      } catch (error) {\r\n   \r\n      throw new HttpException (error ,  HttpStatus.UNAUTHORIZED)\r\n      }\r\n    } else {\r\n    \r\n    throw new ForbiddenException (\"Authorization header must start with Bearer\");\r\n    }\r\n\r\n  }\r\n\r\n  async validateUserRequest(request: { headers: { [x: string]: string } }) {\r\n    const apiKey = request.headers['api-key'];\r\n    return apiKey != undefined && apiKey == DASHBOARD_API_KEY;\r\n  }\r\n\r\n\r\n  async createToken(username: string, email: string): Promise<{ access_token: string }> {\r\n    const payload = {\r\n        name: username,\r\n        email\r\n    };\r\n\r\n    const secret = this.configService.get('USER_TOKEN')\r\n    const token = await this.jwt.signAsync(payload,\r\n        { expiresIn: '10m', secret: secret })\r\n\r\n    return {\r\n        access_token: token,\r\n    };\r\n\r\n}\r\n}\r\n\r\n\r\nfunction next() {\r\n  throw new Error('Function not implemented.');\r\n}\r\n\r\n","export * from './lib/prisma.service';\r\nexport { Prisma } from '@prisma/client/mygate';\r\nexport * from './lib/prisma-client-mygate.module';\r\n\r\n","import { INestApplication, Injectable, OnModuleInit } from '@nestjs/common';\r\nimport { PrismaClient } from '@prisma/client/mygate';\r\n\r\n@Injectable()\r\nexport class PrismaService extends PrismaClient implements OnModuleInit {\r\n  async onModuleInit() {\r\n    await this.$connect();\r\n  }\r\n}\r\n","module.exports = require(\"@prisma/client/mygate\");","import { Module } from '@nestjs/common';\r\nimport { PrismaService } from './prisma.service';\r\n\r\n@Module({\r\n  controllers: [],\r\n  providers: [PrismaService],\r\n  exports: [PrismaService],\r\n})\r\nexport class PrismaClientMygateModule {}\r\n","module.exports = require(\"@nestjs/config\");","module.exports = require(\"bcrypt\");","export const MYGATE_API_URL = process.env.MYGATE_API_URL;\r\nexport const MYGATE_API_KEY = process.env.MYGATE_API_KEY;\r\nexport const MYGATE_SYNC_CRON = process.env.MYGATE_SYNC_CRON;\r\nexport const DEVICE_SYNC_CRON = process.env.DEVICE_SYNC_CRON;\r\nexport const DEVICE_SYNC_BATCH_SIZE = Number(\r\n  process.env.DEVICE_SYNC_BATCH_SIZE\r\n);\r\nexport const MQTT_DOMAIN_MYGATE = process.env.MQTT_DOMAIN_MYGATE;\r\nexport const MQTT_HTTP_PROTOCOL_MYGATE = process.env.MQTT_HTTP_PROTOCOL_MYGATE;\r\nexport const MQTT_PORT_MYGATE = process.env.MQTT_PORT_MYGATE;\r\nexport const MQTT_USERNAME = process.env.MQTT_USERNAME;\r\nexport const MQTT_PASSWORD = process.env.MQTT_PASSWORD;\r\nexport const MQTT_MAX_RETRY_COUNT = Number(process.env.MQTT_MAX_RETRY_COUNT);\r\nexport const API_URL = process.env.API_URL;\r\nexport const PORT = process.env.PORT;\r\nexport const DASHBOARD_API_KEY = process.env.DASHBOARD_API_KEY;\r\n","module.exports = require(\"@nestjs/jwt\");","module.exports = require(\"jsonwebtoken\");","import { Injectable } from '@nestjs/common';\r\n\r\n@Injectable()\r\nexport class AppService {}\r\n","import { Module } from '@nestjs/common';\r\nimport { DevicesController } from './devices.controller';\r\nimport { DevicesService } from './devices.service';\r\nimport { PrismaClientMygateModule } from '@fnt-flsy/prisma-client-mygate';\r\nimport { MainFluxModule } from '../mainflux/mainflux.module';\r\nimport { MainFluxService } from '../mainflux/mainflux.service';\r\nimport { AuthModule } from '../core/auth/auth.module';\r\nimport { AuthService } from '../core/auth/auth.service';\r\nimport { ConfigService } from '@nestjs/config';\r\nimport { JwtService } from '@nestjs/jwt';\r\n\r\n@Module({\r\n  imports: [PrismaClientMygateModule, MainFluxModule, AuthModule],\r\n  controllers: [DevicesController],\r\n  providers: [DevicesService, MainFluxService, AuthService, JwtService, ConfigService],\r\n})\r\nexport class DevicesModule {}\r\n","import {\r\n  Body,\r\n  Controller,\r\n  Get,\r\n  Post,\r\n  Put,\r\n  Delete,\r\n  Param,\r\n  HttpCode,\r\n  HttpStatus,\r\n  UseGuards,\r\n} from '@nestjs/common';\r\nimport { DevicesService } from './devices.service';\r\nimport {\r\n  AddDeviceDto,\r\n  DeviceDto,\r\n  EditDeviceDto,\r\n  returnDevicePostDto,\r\n} from './dto/device.dto';\r\nimport {\r\n  ApiBody,\r\n  ApiOperation,\r\n  ApiParam,\r\n  ApiResponse,\r\n  ApiTags,\r\n} from '@nestjs/swagger';\r\nimport { AuthGuard } from '../core/auth/auth.guard';\r\nimport { UserAuthGuard } from '../core/auth/user-auth.guard';\r\n\r\n@ApiTags('devices')\r\n@UseGuards(UserAuthGuard)\r\n@Controller('devices')\r\nexport class DevicesController {\r\n  constructor(private deviceService: DevicesService) {}\r\n\r\n  @ApiOperation({ summary: 'Get all the devices' })\r\n  @ApiResponse({ status: 200, description: 'Success', type: [DeviceDto] })\r\n  @Get()\r\n  getDevices(): Promise<DeviceDto[]> {\r\n    return this.deviceService.getDevices();\r\n  }\r\n\r\n  @ApiOperation({ summary: 'Get device information by id' })\r\n  @ApiParam({ name: 'id', type: 'string', description: 'Example ID: 1' })\r\n  @ApiResponse({ status: 200, description: 'Success', type: DeviceDto })\r\n  @UseGuards(AuthGuard)\r\n  @Get(':id')\r\n  getDevice(@Param('id') id: number): Promise<DeviceDto> {\r\n    return this.deviceService.getDevice(+id);\r\n  }\r\n\r\n  @ApiOperation({ summary: 'Create device api' })\r\n  @ApiBody({ type: AddDeviceDto })\r\n  @ApiResponse({\r\n    status: 201,\r\n    description: 'Success',\r\n    type: returnDevicePostDto,\r\n  })\r\n  @Post()\r\n  @HttpCode(HttpStatus.CREATED)\r\n  addDevice(@Body() device: AddDeviceDto) {\r\n    return this.deviceService.addDevice(device);\r\n  }\r\n\r\n  @ApiOperation({ summary: 'Edit device Information' })\r\n  @ApiParam({ name: 'id', type: 'string', description: 'Example ID: 1' })\r\n  @ApiBody({ type: EditDeviceDto })\r\n  @ApiResponse({\r\n    status: HttpStatus.ACCEPTED,\r\n    description: 'Success',\r\n    type: DeviceDto,\r\n  })\r\n  @Put(':id')\r\n  editDevice(\r\n    @Param('id') id: number,\r\n    @Body() device: EditDeviceDto\r\n  ): Promise<DeviceDto> {\r\n    return this.deviceService.editDevice(+id, device);\r\n  }\r\n\r\n  @ApiOperation({ summary: 'Delete device information api' })\r\n  @ApiParam({ name: 'id', type: 'string', description: 'Example ID: 1' })\r\n  @ApiResponse({ status: 204, description: 'No Content' })\r\n  @Delete(':id')\r\n  @HttpCode(HttpStatus.NO_CONTENT)\r\n  deleteDevice(@Param('id') id: number) {\r\n    return this.deviceService.deleteDevice(); //+id\r\n  }\r\n}\r\n","import { HttpException, HttpStatus, Injectable } from '@nestjs/common';\r\nimport { PrismaService } from '@fnt-flsy/prisma-client-mygate';\r\nimport { AddDeviceDto, DeviceDto, EditDeviceDto } from './dto/device.dto';\r\nimport { MainFluxService } from '../mainflux/mainflux.service';\r\nimport { AuthService } from '../core/auth/auth.service';\r\n\r\n@Injectable()\r\nexport class DevicesService {\r\n  constructor(\r\n    private readonly prismaService: PrismaService,\r\n    private mainFluxService: MainFluxService,\r\n    private authService: AuthService\r\n  ) {}\r\n\r\n  getDevices(): Promise<DeviceDto[]> {\r\n    return this.prismaService.device.findMany({\r\n      select: {\r\n        id: true,\r\n        deviceId: true,\r\n        name: true,\r\n        thingId: true,\r\n        thingKey: true,\r\n        channelId: true,\r\n        lastSyncTimestamp: true,\r\n        isMyGateDevice: true,\r\n      },\r\n    });\r\n  }\r\n\r\n  async getDevice(id: number): Promise<DeviceDto> {\r\n    const device = await this.prismaService.device.findFirst({\r\n      where: {\r\n        id: id,\r\n      },\r\n    });\r\n    if (!device) {\r\n      throw new HttpException('Device not found', HttpStatus.NOT_FOUND);\r\n    }\r\n    return device;\r\n  }\r\n\r\n  async addDevice(device: AddDeviceDto): Promise<DeviceDto> {\r\n    const uniqueDevice = await this.prismaService.device.findFirst({\r\n      where: {\r\n        deviceId: device.deviceId,\r\n      },\r\n    });\r\n    if (uniqueDevice) {\r\n      throw new HttpException('Device already exists', HttpStatus.BAD_REQUEST);\r\n    }\r\n    const thingResponse = await this.mainFluxService.createThing(\r\n      device.deviceId\r\n    );\r\n    if (!(thingResponse && thingResponse.status == 201)) {\r\n      throw new HttpException(\r\n        'Error creating thing',\r\n        HttpStatus.INTERNAL_SERVER_ERROR\r\n      );\r\n    }\r\n    const thingId = thingResponse.data.things[0].id;\r\n    const thingKey = thingResponse.data.things[0].key;\r\n    const channelResponse = await this.mainFluxService.createChannel(\r\n      device.deviceId\r\n    );\r\n\r\n    if (!(channelResponse && channelResponse.status == 201)) {\r\n      // delete thing if channel is not created\r\n      await this.mainFluxService.deleteThing(thingId);\r\n      throw new HttpException(\r\n        'Error creating channel',\r\n        HttpStatus.INTERNAL_SERVER_ERROR\r\n      );\r\n    }\r\n    const channelId = channelResponse.data.channels[0].id;\r\n    const connectionResponse = await this.mainFluxService.connectThingChannel(\r\n      thingId,\r\n      channelId\r\n    );\r\n    if (!(connectionResponse && connectionResponse.status === 200)) {\r\n      // delete thing and channel if connection fails\r\n      await this.mainFluxService.deleteChannel(channelId);\r\n      await this.mainFluxService.deleteThing(thingId);\r\n      throw new HttpException(\r\n        'Error connecting thing and channel',\r\n        HttpStatus.INTERNAL_SERVER_ERROR\r\n      );\r\n    }\r\n    const deviceKey = await this.authService.hashPassword(device.deviceKey);\r\n    const newDevice = await this.prismaService.device.create({\r\n      data: {\r\n        deviceId: device.deviceId,\r\n        deviceKey: deviceKey,\r\n        name: device.name,\r\n        thingId: thingId,\r\n        thingKey: thingKey,\r\n        channelId: channelId,\r\n        lastSyncTimestamp: 0,\r\n        isMyGateDevice: device.isMyGateDevice,\r\n      },\r\n    });\r\n    if (newDevice == undefined) {\r\n      //delete thing and channel if device is not created\r\n      await this.mainFluxService.deleteChannel(channelId);\r\n      await this.mainFluxService.deleteThing(thingId);\r\n      throw new HttpException(\r\n        'Error creating device',\r\n        HttpStatus.INTERNAL_SERVER_ERROR\r\n      );\r\n    }\r\n    return {\r\n      id: newDevice.id,\r\n      deviceId: newDevice.deviceId,\r\n      name: newDevice.name,\r\n      thingId: newDevice.thingId,\r\n      thingKey: newDevice.thingKey,\r\n      channelId: newDevice.channelId,\r\n      lastSyncTimestamp: newDevice.lastSyncTimestamp,\r\n      isMyGateDevice: newDevice.isMyGateDevice,\r\n    };\r\n  }\r\n\r\n  async editDevice(id: number, device: EditDeviceDto): Promise<DeviceDto> {\r\n    const foundDevice = await this.prismaService.device.findFirst({\r\n      where: {\r\n        id: Number(id),\r\n      },\r\n    });\r\n    if (!foundDevice) {\r\n      throw new HttpException('Device not found', HttpStatus.NOT_FOUND);\r\n    }\r\n    const updatedDevice = await this.prismaService.device.update({\r\n      where: {\r\n        id: id,\r\n      },\r\n      data: {\r\n        name: device.name,\r\n      },\r\n    });\r\n    return {\r\n      id: updatedDevice.id,\r\n      deviceId: updatedDevice.deviceId,\r\n      name: updatedDevice.name,\r\n      thingId: updatedDevice.thingId,\r\n      thingKey: updatedDevice.thingKey,\r\n      channelId: updatedDevice.channelId,\r\n      lastSyncTimestamp: updatedDevice.lastSyncTimestamp,\r\n      isMyGateDevice: updatedDevice.isMyGateDevice,\r\n    };\r\n  }\r\n\r\n  async deleteDevice() //id: number\r\n  {\r\n    // TODO: implement this method\r\n    // const device = await this.prismaService.device.findFirst({\r\n    //   where: {\r\n    //     id: id,\r\n    //   },\r\n    // });\r\n    // if (!device) {\r\n    //   throw new HttpException('Device not found', HttpStatus.NOT_FOUND);\r\n    // }\r\n    // const channelResponse = await this.mainFluxService.deleteChannel(\r\n    //   device.channelId\r\n    // );\r\n    // if (channelResponse.status !== 204) {\r\n    //   throw new HttpException(\r\n    //     'Error deleting channel',\r\n    //     HttpStatus.INTERNAL_SERVER_ERROR\r\n    //   );\r\n    // }\r\n    // const thingResponse = await this.mainFluxService.deleteThing(\r\n    //   device.thingId\r\n    // );\r\n    // if (thingResponse.status !== 204) {\r\n    //   throw new HttpException(\r\n    //     'Error deleting thing',\r\n    //     HttpStatus.INTERNAL_SERVER_ERROR\r\n    //   );\r\n    // }\r\n    // // TODO: fix this with id fk for devices\r\n    // // TODO: do cascade delete\r\n    // const uniqueTagIdlist = await this.prismaService.myGateCard.findMany({\r\n    //   where: {\r\n    //     deviceId: device.deviceId,\r\n    //   },\r\n    //   select: {\r\n    //     id: true,\r\n    //   },\r\n    // });\r\n    // uniqueTagIdlist.forEach(async (tagid) => {\r\n    //   const deletedlogs = await this.prismaService.myGateLog.deleteMany({\r\n    //     where: {\r\n    //       myGateCardId: tagid.id,\r\n    //     },\r\n    //   });\r\n    // });\r\n    // const deltagresponse = await this.prismaService.myGateCard.deleteMany({\r\n    //   where: {\r\n    //     deviceId: device.deviceId,\r\n    //   },\r\n    // });\r\n    // const syncToken = await this.prismaService.syncMessage.findFirst({\r\n    //   where: {\r\n    //     deviceId: device.id,\r\n    //   },\r\n    // });\r\n    // if (syncToken) {\r\n    //   const delSyncMessageCards =\r\n    //     await this.prismaService.syncMessageCard.deleteMany({\r\n    //       where: {\r\n    //         sMId: syncToken.id,\r\n    //       },\r\n    //     });\r\n    //   if (delSyncMessageCards) {\r\n    //     const delSynctoken = await this.prismaService.syncMessage.delete({\r\n    //       where: {\r\n    //         id: syncToken.id,\r\n    //       },\r\n    //     });\r\n    //   }\r\n    // }\r\n    // const deletedDeviceState = await this.prismaService.deviceCard.deleteMany({\r\n    //   where: {\r\n    //     deviceId: device.id,\r\n    //   },\r\n    // });\r\n    // if (deltagresponse) {\r\n    //   const deletedDevice = await this.prismaService.device.delete({\r\n    //     where: {\r\n    //       deviceId: device.deviceId,\r\n    //     },\r\n    //     select: {\r\n    //       deviceId: true,\r\n    //       name: true,\r\n    //       thingId: true,\r\n    //       thingKey: true,\r\n    //       channelId: true,\r\n    //       lastSyncTimestamp: true,\r\n    //     },\r\n    //   });\r\n    //\r\n    //   return;\r\n    // } else\r\n    //   throw new HttpException(\r\n    //     {\r\n    //       status: HttpStatus.BAD_REQUEST,\r\n    //       error: 'Tag Not Exist',\r\n    //     },\r\n    //     HttpStatus.BAD_REQUEST\r\n    //   );\r\n  }\r\n}\r\n","import { Injectable } from '@nestjs/common';\r\nimport axios, { AxiosError } from 'axios';\r\nimport {\r\n  MQTT_DOMAIN_MYGATE,\r\n  MQTT_HTTP_PROTOCOL_MYGATE,\r\n  MQTT_MAX_RETRY_COUNT,\r\n  MQTT_PASSWORD,\r\n  MQTT_PORT_MYGATE,\r\n  MQTT_USERNAME,\r\n} from '../core/consts/env.consts';\r\nimport * as mqtt from 'mqtt';\r\nimport { AccessNotifyDto } from '../core/dto/access-notify.dto';\r\n\r\n@Injectable()\r\nexport class MainFluxService {\r\n  private USER_TOKEN = '';\r\n\r\n  async connectAndPublishWithRetry<T>(\r\n    payload: T,\r\n    thingId: string,\r\n    thingKey: string,\r\n    channelId: string,\r\n    topicName: string\r\n  ) {\r\n    const clientId = `mqtt_${Math.random().toString(16).slice(3)}`;\r\n    console.log(thingKey, thingId, channelId, payload, clientId);\r\n    const mqttOptions = {\r\n      clientId,\r\n      clean: true,\r\n      connectTimeout: 4000,\r\n      username: thingId,\r\n      password: thingKey,\r\n      reconnectPeriod: 1000,\r\n      // additional options can be added here\r\n    };\r\n    const maxRetryAttempts = MQTT_MAX_RETRY_COUNT;\r\n    let retryCount = 0;\r\n    while (retryCount < maxRetryAttempts) {\r\n      try {\r\n        // Connect to the MQTT broker\r\n        const client = mqtt.connect(\r\n          `mqtt://${MQTT_DOMAIN_MYGATE}:${MQTT_PORT_MYGATE}`,\r\n          mqttOptions\r\n        );\r\n        // wrap the connection in a promise to handle connection errors\r\n        await new Promise((resolve, reject) => {\r\n          client.on('connect', () => {\r\n            console.log('Connected to MQTT broker');\r\n            resolve(true); // Resolve with a boolean to indicate the success\r\n          });\r\n          client.on('error', (error) => {\r\n            console.error(`MQTT connection error: ${error}`);\r\n            client.end(); // Close the connection if an error occurs\r\n            reject(false); // Reject with a boolean to indicate the failure reason\r\n          });\r\n          client.on('close', () => {\r\n            console.log(`MQTT connection close`); // resolve(true);\r\n            client.end(); // Close the connection if an error occurs\r\n            reject(false);\r\n          });\r\n          client.on('end', () => {\r\n            console.log(`MQTT connection end`); // resolve(true);\r\n          });\r\n        });\r\n        // publish your message here\r\n        const topic = `channels/${channelId}/messages/${topicName}`;\r\n        const message = JSON.stringify(payload);\r\n        client.publish(topic, message, (err) => {\r\n          if (err) {\r\n            console.error(`Error while publishing: ${err.message}`);\r\n            return false;\r\n          }\r\n          // close the connection after publishing\r\n          console.log('Published to MQTT', topic, payload);\r\n          client.end();\r\n        });\r\n        // exit the function after successful publish\r\n        return true;\r\n      } catch (error) {\r\n        // Retry the connection after a delay\r\n        retryCount++;\r\n        console.log(`Retry attempt ${retryCount} failed: ${error.message}`);\r\n        await new Promise((resolve) => setTimeout(resolve, 1000)); // Adjust the delay as needed // return { //status: false, //resp: error.message // }\r\n      }\r\n    }\r\n    console.error('Failed to connect after multiple attempts.'); // return 'Failed to connect after multiple attempts.'\r\n    return false;\r\n  }\r\n\r\n  async updateUserToken() {\r\n    const userTokenResponse = await axios.post(\r\n      `${MQTT_HTTP_PROTOCOL_MYGATE}://${MQTT_DOMAIN_MYGATE}/tokens`,\r\n      {\r\n        email: `${MQTT_USERNAME}`,\r\n        password: `${MQTT_PASSWORD}`,\r\n      },\r\n      {\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n      }\r\n    );\r\n    if (userTokenResponse) {\r\n      this.USER_TOKEN = userTokenResponse.data.token;\r\n    }\r\n  }\r\n\r\n  async deleteThing(thingId: string) {\r\n    return await this.deleteThingRequest(thingId).catch(\r\n      async (e: AxiosError) => {\r\n        // retry once with new user token\r\n        await this.updateUserToken();\r\n        return await this.deleteThingRequest(thingId);\r\n      }\r\n    );\r\n  }\r\n\r\n  deleteThingRequest(thingId: string) {\r\n    return axios.delete(\r\n      `${MQTT_HTTP_PROTOCOL_MYGATE}://${MQTT_DOMAIN_MYGATE}/things/${thingId}`,\r\n      {\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n          Authorization: `Bearer ${this.USER_TOKEN}`,\r\n        },\r\n      }\r\n    );\r\n  }\r\n\r\n  async deleteChannel(channelId: string) {\r\n    return await this.deleteChannelRequest(channelId).catch(\r\n      async (e: AxiosError) => {\r\n        // retry once with new user token\r\n        await this.updateUserToken();\r\n        return await this.deleteChannelRequest(channelId);\r\n      }\r\n    );\r\n  }\r\n\r\n  deleteChannelRequest(channelId: string) {\r\n    return axios.delete(\r\n      `${MQTT_HTTP_PROTOCOL_MYGATE}://${MQTT_DOMAIN_MYGATE}/channels/${channelId}`,\r\n      {\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n          Authorization: `Bearer ${this.USER_TOKEN}`,\r\n        },\r\n      }\r\n    );\r\n  }\r\n\r\n  async createThing(deviceId: string) {\r\n    return await this.createThingRequest(deviceId).catch(\r\n      async (e: AxiosError) => {\r\n        // retry once with new user token\r\n        await this.updateUserToken();\r\n        return await this.createThingRequest(deviceId);\r\n      }\r\n    );\r\n  }\r\n\r\n  private createThingRequest(deviceId: string) {\r\n    const data = [{ name: deviceId }];\r\n    return axios.post(\r\n      `${MQTT_HTTP_PROTOCOL_MYGATE}://${MQTT_DOMAIN_MYGATE}/things`,\r\n      data,\r\n      {\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n          Authorization: `Bearer ${this.USER_TOKEN}`,\r\n        },\r\n      }\r\n    );\r\n  }\r\n\r\n  async createChannel(deviceId: string) {\r\n    return await this.createChannelRequest(deviceId).catch(\r\n      async (e: AxiosError) => {\r\n        // retry once with new user token\r\n        await this.updateUserToken();\r\n        return await this.createChannelRequest(deviceId);\r\n      }\r\n    );\r\n  }\r\n\r\n  private createChannelRequest(deviceId: string) {\r\n    const data = [{ name: deviceId }];\r\n    return axios.post(\r\n      `${MQTT_HTTP_PROTOCOL_MYGATE}://${MQTT_DOMAIN_MYGATE}/channels`,\r\n      data,\r\n      {\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n          Authorization: `Bearer ${this.USER_TOKEN}`,\r\n        },\r\n      }\r\n    );\r\n  }\r\n\r\n  async connectThingChannel(thingId: string, channelId: string) {\r\n    return await this.connectThingChannelRequest(thingId, channelId).catch(\r\n      async (e: AxiosError) => {\r\n        // retry once with new user token\r\n        await this.updateUserToken();\r\n        return await this.connectThingChannelRequest(thingId, channelId);\r\n      }\r\n    );\r\n  }\r\n\r\n  private connectThingChannelRequest(thingId: string, channelId: string) {\r\n    return axios.put(\r\n      `${MQTT_HTTP_PROTOCOL_MYGATE}://${MQTT_DOMAIN_MYGATE}/channels/${channelId}/things/${thingId}`,\r\n      null,\r\n      {\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n          Authorization: `Bearer ${this.USER_TOKEN}`,\r\n        },\r\n      }\r\n    );\r\n  }\r\n\r\n  async publishNotifyToMqtt(\r\n    accessNotifyDto: AccessNotifyDto,\r\n    deviceId: string,\r\n    thingId: string,\r\n    thingKey: string,\r\n    channelId: string\r\n  ) {\r\n    // build senml for notification\r\n    const body = [\r\n      {\r\n        bn: '',\r\n        bt: accessNotifyDto.ts,\r\n        bu: '',\r\n        bver: 5,\r\n        n: 'deviceId',\r\n        vs: deviceId,\r\n      },\r\n      {\r\n        n: 'cardId',\r\n        vs: accessNotifyDto.ci,\r\n      },\r\n      {\r\n        n: 'status',\r\n        vs: accessNotifyDto.st,\r\n      },\r\n      {\r\n        n: 'direction',\r\n        vs: accessNotifyDto.dr,\r\n      },\r\n    ];\r\n    return this.connectAndPublishWithRetry(\r\n      body,\r\n      thingId,\r\n      thingKey,\r\n      channelId,\r\n      'mygate-notify'\r\n    );\r\n  }\r\n}\r\n","module.exports = require(\"axios\");","module.exports = require(\"mqtt\");","import { ApiProperty, PickType } from '@nestjs/swagger';\r\n\r\nexport class DeviceDto {\r\n  @ApiProperty() id: number;\r\n  @ApiProperty() deviceId: string;\r\n  @ApiProperty() name: string;\r\n  @ApiProperty() thingId: string;\r\n  @ApiProperty() thingKey: string;\r\n  @ApiProperty() channelId: string;\r\n  @ApiProperty() lastSyncTimestamp: number;\r\n  @ApiProperty() isMyGateDevice: boolean;\r\n}\r\n\r\nexport class AddDeviceDto extends PickType(DeviceDto, [\r\n  'deviceId',\r\n  'name',\r\n  'isMyGateDevice',\r\n]) {\r\n  @ApiProperty() deviceKey: string;\r\n}\r\n\r\nexport class EditDeviceDto extends PickType(DeviceDto, ['id', 'name']) {}\r\n\r\nexport class returnDevicePostDto {\r\n  @ApiProperty() thingId: string;\r\n  @ApiProperty() thingKey: string;\r\n  @ApiProperty() channelId: string;\r\n}\r\n","import { CanActivate, ExecutionContext, Injectable } from '@nestjs/common';\r\nimport { Observable } from 'rxjs';\r\nimport { AuthService } from './auth.service';\r\n\r\n@Injectable()\r\nexport class UserAuthGuard implements CanActivate {\r\n  constructor(private readonly authService: AuthService) {}\r\n\r\n  canActivate(\r\n    context: ExecutionContext\r\n  ): boolean | Promise<boolean> | Observable<boolean> {\r\n    const request = context.switchToHttp().getRequest();\r\n\r\n   \r\n    // const data = context.switchToHttp().getRequest();\r\n    // const user = request.user\r\n\r\n    return this.authService.validateBearerToken(request );\r\n  }\r\n}\r\n","import { Module } from '@nestjs/common';\r\nimport { MainFluxService } from './mainflux.service';\r\n\r\n@Module({\r\n  providers: [MainFluxService],\r\n})\r\nexport class MainFluxModule {}\r\n","import { Module } from '@nestjs/common';\r\nimport { AuthService } from './auth.service';\r\nimport { ConfigService } from '@nestjs/config';\r\nimport { PrismaClientMygateModule } from '@fnt-flsy/prisma-client-mygate';\r\nimport { AuthGuard } from './auth.guard';\r\nimport { JwtModule, JwtService } from '@nestjs/jwt';\r\n\r\n@Module({\r\n  imports: [PrismaClientMygateModule,JwtModule.register({})],\r\n  providers: [AuthService, ConfigService, JwtService, AuthGuard],\r\n  exports: [],\r\n})\r\nexport class AuthModule {}\r\n","import { Module } from '@nestjs/common';\r\nimport { MyGateCardsController } from './mygate-cards.controller';\r\nimport { MyGateCardsService } from './mygate-cards.service';\r\nimport { PrismaClientMygateModule } from '@fnt-flsy/prisma-client-mygate';\r\nimport { MyGateModule } from '../mygate/mygate.module';\r\nimport { AuthModule } from '../core/auth/auth.module';\r\nimport { AuthService } from '../core/auth/auth.service';\r\nimport { ConfigService } from '@nestjs/config';\r\nimport { JwtService } from '@nestjs/jwt';\r\n\r\n@Module({\r\n  imports: [PrismaClientMygateModule, MyGateModule, AuthModule],\r\n  controllers: [MyGateCardsController],\r\n  providers: [MyGateCardsService, AuthService,JwtService , ConfigService],\r\n})\r\nexport class MyGateCardsModule {}\r\n","import {\r\n  Body,\r\n  Controller,\r\n  Delete,\r\n  Get,\r\n  HttpCode,\r\n  HttpStatus,\r\n  Param,\r\n  Post,\r\n  Put,\r\n  UseGuards,\r\n} from '@nestjs/common';\r\nimport { MyGateCardsService } from './mygate-cards.service';\r\nimport {\r\n  ApiTags,\r\n  ApiBody,\r\n  ApiOperation,\r\n  ApiParam,\r\n  ApiResponse,\r\n} from '@nestjs/swagger';\r\nimport { UserAuthGuard } from '../core/auth/user-auth.guard';\r\nimport {\r\n  AddMyGateCardDto,\r\n  EditMyGateCardDto,\r\n  GetMyGateCardDto,\r\n  MyGateCardDto,\r\n} from './dto/mygate-card.dto';\r\n\r\n@ApiTags('mygate-cards')\r\n@UseGuards(UserAuthGuard)\r\n@Controller('mygate-cards')\r\nexport class MyGateCardsController {\r\n  constructor(private myGateCardsService: MyGateCardsService) {}\r\n\r\n  @ApiOperation({ summary: 'Get all cards' })\r\n  @ApiResponse({ status: 200, description: 'Success', type: [GetMyGateCardDto] })\r\n  @ApiParam({ name: 'deviceId', type: 'string', description: 'Example ID: Fountlab_tag_01' })\r\n  @Get(':deviceId')\r\n  getMyGateCards(@Param('deviceId') deviceId: string): Promise<GetMyGateCardDto[]> {\r\n    return this.myGateCardsService.getMyGateCards(deviceId);\r\n  }\r\n\r\n  @ApiOperation({ summary: 'Get Card by id' })\r\n  @ApiParam({ name: 'id', type: 'number', description: 'Example ID: 1' })\r\n  @ApiResponse({ status: 200, description: 'Success', type: MyGateCardDto })\r\n  @Get(':id')\r\n  getMyGateCard(@Param('id') id: number): Promise<MyGateCardDto> {\r\n    return this.myGateCardsService.getMyGateCard(+id);\r\n  }\r\n\r\n  @ApiOperation({ summary: 'Add Card' })\r\n  @ApiBody({ type: AddMyGateCardDto })\r\n  @ApiResponse({ status: 201, description: 'Success', type: MyGateCardDto })\r\n  @Post()\r\n  addTag(@Body() addMyGateCardDto: AddMyGateCardDto) {\r\n    return this.myGateCardsService.addMyGateCard(addMyGateCardDto);\r\n  }\r\n\r\n  @ApiOperation({ summary: 'Update Card Information' })\r\n  @ApiBody({ type: EditMyGateCardDto })\r\n  @ApiResponse({ status: 201, description: 'Success', type: MyGateCardDto })\r\n  @Put(':id')\r\n  editTag(\r\n    @Param('id') id: number,\r\n    @Body() editMyGateCardDto: EditMyGateCardDto\r\n  ): Promise<MyGateCardDto> {\r\n    return this.myGateCardsService.editMyGateCard(+id, editMyGateCardDto);\r\n  }\r\n\r\n  @ApiOperation({ summary: 'Delete Card Information' })\r\n  @ApiParam({ name: 'id', type: 'number', description: 'Example ID: 1' })\r\n  @ApiResponse({ status: 204, description: 'Success', type: MyGateCardDto })\r\n  @HttpCode(HttpStatus.NO_CONTENT)\r\n  @Delete(':id')\r\n  deleteMyGateCard(@Param('id') id: number): Promise<MyGateCardDto> {\r\n    return this.myGateCardsService.deleteMyGateCard(+id);\r\n  }\r\n}\r\n","import { PrismaService } from '@fnt-flsy/prisma-client-mygate';\r\nimport { HttpException, HttpStatus, Injectable } from '@nestjs/common';\r\nimport {\r\n  AddMyGateCardDto,\r\n  EditMyGateCardDto,\r\n  GetMyGateCardDto,\r\n  MyGateCardDto,\r\n} from './dto/mygate-card.dto';\r\n\r\n@Injectable()\r\nexport class MyGateCardsService {\r\n  constructor(private readonly prismaService: PrismaService) { }\r\n\r\n  async getMyGateCards(deviceId: string): Promise<GetMyGateCardDto[]> {\r\n    // check for device and get device cards and mygate cards from the device\r\n\r\n    const device = await this.prismaService.device.findFirst({\r\n      where: {\r\n        deviceId: deviceId\r\n      },\r\n      include: {\r\n        myGateCards: true,\r\n        deviceCards: true\r\n      }\r\n    })\r\n\r\n    if (!device) throw new HttpException(\"device not found\", HttpStatus.NOT_FOUND);\r\n\r\n    // first take mygatecards and devicecards out from the object.\r\n\r\n    const mygateCards = device.myGateCards;\r\n    const deviceCards = device.deviceCards;\r\n    \r\n    // Iterate over each item in mygateCards\r\n    const mygateCardsWithPresence = mygateCards.map(mygateCard => {\r\n      // Check if the accessDisplay of the current mygateCard exists in deviceCards\r\n      const isPresent = deviceCards.some(deviceCard => deviceCard.cardId === mygateCard.accessDisplay);\r\n\r\n      // Return the mygateCard with the isPresent field added\r\n      return {\r\n        ...mygateCard,\r\n        isPresent\r\n      };\r\n    });\r\n\r\n    return mygateCardsWithPresence\r\n  }\r\n\r\n  async getMyGateCard(id: number) {\r\n    const myGateCard = await this.prismaService.myGateCard.findFirst({\r\n      where: {\r\n        id: id,\r\n      },\r\n      include: {\r\n        device: true,\r\n      },\r\n    });\r\n    if (!myGateCard) {\r\n      throw new HttpException('MyGate card not found', HttpStatus.NOT_FOUND);\r\n    }\r\n    return { ...myGateCard, deviceId: myGateCard.device.deviceId };\r\n  }\r\n\r\n  async addMyGateCard(addMyGateCardDto: AddMyGateCardDto) {\r\n    console.log(addMyGateCardDto);\r\n    const existingTag = await this.prismaService.myGateCard.findFirst({\r\n      where: {\r\n        OR: [\r\n          {\r\n            accessRefId: addMyGateCardDto.accessRefId,\r\n          },\r\n          { accessDisplay: addMyGateCardDto.accessDisplay },\r\n        ],\r\n      },\r\n    });\r\n    if (existingTag) {\r\n      throw new HttpException(\r\n        'MyGate card already exists',\r\n        HttpStatus.BAD_REQUEST\r\n      );\r\n    }\r\n    const device = await this.prismaService.device.findFirst({\r\n      where: {\r\n        deviceId: addMyGateCardDto.deviceId,\r\n      },\r\n    });\r\n    if (!device) {\r\n      throw new HttpException('Device not found', HttpStatus.NOT_FOUND);\r\n    }\r\n    return this.prismaService.myGateCard.create({\r\n      data: {\r\n        accessDisplay: String(addMyGateCardDto.accessDisplay),\r\n        accessEntityType: String(addMyGateCardDto.accessEntityType),\r\n        accessRefId: String(addMyGateCardDto.accessRefId),\r\n        accessUuid: String(addMyGateCardDto.accessUuidType),\r\n        accessUuidType: String(addMyGateCardDto.accessUuidType),\r\n        deviceId: device.id,\r\n      },\r\n    });\r\n  }\r\n\r\n  async editMyGateCard(id: number, editMyGateCardDto: EditMyGateCardDto) {\r\n    const device = await this.prismaService.device.findFirst({\r\n      where: {\r\n        deviceId: editMyGateCardDto.deviceId,\r\n      },\r\n    });\r\n    if (!device) {\r\n      throw new HttpException('Device not found', HttpStatus.NOT_FOUND);\r\n    }\r\n    const edited = await this.prismaService.myGateCard.update({\r\n      where: {\r\n        id: id,\r\n      },\r\n      data: { ...editMyGateCardDto, deviceId: device.id },\r\n    });\r\n    return { ...edited, deviceId: device.deviceId };\r\n  }\r\n\r\n  async deleteMyGateCard(id: number): Promise<MyGateCardDto> {\r\n    const myGateCard = await this.prismaService.myGateCard.findFirst({\r\n      where: {\r\n        id: id,\r\n      },\r\n      include: {\r\n        device: true,\r\n      },\r\n    });\r\n    if (!myGateCard) {\r\n      throw new HttpException('MyGate card not found', HttpStatus.NOT_FOUND);\r\n    }\r\n    const deleted = await this.prismaService.myGateCard.delete({\r\n      where: {\r\n        id: id,\r\n      },\r\n    });\r\n    return { ...deleted, deviceId: myGateCard.device.deviceId };\r\n  }\r\n}\r\n","import { ApiProperty, OmitType } from '@nestjs/swagger';\r\n\r\nexport class MyGateCardDto {\r\n  @ApiProperty() id: number;\r\n  @ApiProperty() accessEntityType: string;\r\n  @ApiProperty() accessUuidType: string;\r\n  @ApiProperty() accessRefId: string;\r\n  @ApiProperty() accessUuid: string;\r\n  @ApiProperty() accessDisplay: string;\r\n  @ApiProperty() deviceId: string;\r\n  @ApiProperty() isPresent?: boolean\r\n}\r\n\r\n\r\nexport class GetMyGateCardDto {\r\n  @ApiProperty() id: number;\r\n  @ApiProperty() accessEntityType: string;\r\n  @ApiProperty() accessUuidType: string;\r\n  @ApiProperty() accessRefId: string;\r\n  @ApiProperty() accessUuid: string;\r\n  @ApiProperty() accessDisplay: string;\r\n  @ApiProperty() deviceId: number;\r\n  @ApiProperty() isPresent?: boolean\r\n}\r\n\r\nexport class AddMyGateCardDto extends OmitType(MyGateCardDto, ['id']) {}\r\n\r\nexport class EditMyGateCardDto extends OmitType(MyGateCardDto, ['id']) {}\r\n","import { Module } from '@nestjs/common';\r\nimport { MyGateService } from './mygate.service';\r\nimport { PrismaClientMygateModule } from '@fnt-flsy/prisma-client-mygate';\r\nimport { MyGateController } from './mygate.controller';\r\nimport { MainFluxModule } from '../mainflux/mainflux.module';\r\nimport { MainFluxService } from '../mainflux/mainflux.service';\r\nimport { AuthModule } from '../core/auth/auth.module';\r\nimport { ConfigService } from '@nestjs/config';\r\nimport { AuthService } from '../core/auth/auth.service';\r\nimport { JwtService } from '@nestjs/jwt';\r\n\r\n@Module({\r\n  imports: [PrismaClientMygateModule, MainFluxModule, AuthModule],\r\n  providers: [MyGateService, MainFluxService,JwtService ,AuthService, ConfigService],\r\n  controllers: [MyGateController],\r\n})\r\nexport class MyGateModule {}\r\n","import { HttpException, HttpStatus, Injectable, Logger } from '@nestjs/common';\r\nimport { PrismaService } from '@fnt-flsy/prisma-client-mygate';\r\nimport axios from 'axios';\r\nimport { Cron } from '@nestjs/schedule';\r\nimport {\r\n  MyGateNotifyDto,\r\n  MyGateNotifyResponseDto,\r\n  MyGateSyncResponseDto,\r\n} from './dto/mygate.dto';\r\nimport {\r\n  API_URL,\r\n  DEVICE_SYNC_BATCH_SIZE,\r\n  DEVICE_SYNC_CRON,\r\n  MYGATE_API_KEY,\r\n  MYGATE_API_URL,\r\n  MYGATE_SYNC_CRON,\r\n} from '../core/consts/env.consts';\r\nimport { MainFluxService } from '../mainflux/mainflux.service';\r\nimport { Device } from '@prisma/client/mygate';\r\nimport { AccessSyncDto } from '../core/dto/access-sync.dto';\r\n\r\n@Injectable()\r\nexport class MyGateService {\r\n  constructor(\r\n    private readonly prismaService: PrismaService,\r\n    private mainFluxService: MainFluxService\r\n  ) { }\r\n\r\n\r\n  async mygateCardState(deviceId: string, access_display: string) {\r\n    const device = await this.prismaService.device.findFirst({\r\n      where: {\r\n        deviceId: deviceId\r\n      }\r\n    });\r\n    if (!device) throw new HttpException('device not found', HttpStatus.NOT_FOUND);\r\n\r\n    const mygate_card = await this.prismaService.myGateCard.findFirst({\r\n      where: {\r\n        accessDisplay: access_display,\r\n        deviceId: device.id\r\n      },\r\n      select: {\r\n        accessDisplay: true\r\n      }\r\n    })\r\n\r\n    const device_card = await this.prismaService.deviceCard.findFirst({\r\n      where: {\r\n        cardId: access_display,\r\n        deviceId: device.id\r\n      },\r\n      select: {\r\n        cardId: true\r\n      }\r\n    })\r\n\r\n    return {\r\n      server: mygate_card,\r\n      device: device_card\r\n    }\r\n\r\n  }\r\n\r\n  async myGateNotify(myGateNotifyDto: MyGateNotifyDto) {\r\n    return axios.post(\r\n      `${MYGATE_API_URL}/access/v1/notify`,\r\n      myGateNotifyDto,\r\n      {\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n          Accept: 'application/json',\r\n          'mg-xs-api-key': `${MYGATE_API_KEY}`,\r\n        },\r\n      }\r\n    );\r\n  }\r\n\r\n  @Cron(MYGATE_SYNC_CRON, {\r\n    name: 'myGateSync',\r\n  })\r\n  async myGateSync() {\r\n    try {\r\n      const devices = await this.prismaService.device.findMany({\r\n        where: { isMyGateDevice: true },\r\n        select: { id: true },\r\n      });\r\n      const deviceIds = devices.map((d) => d.id);\r\n      // TODO: implement workers\r\n      const promises = [];\r\n      for (const id of deviceIds) {\r\n        promises.push(this.myGateSyncForDeviceWithId(id));\r\n      }\r\n      await Promise.all(promises);\r\n    } catch (e) {\r\n      Logger.log('myGateSync', e);\r\n    }\r\n  }\r\n\r\n  async myGateSyncForDeviceWithDeviceId(deviceId: string) {\r\n    const device = await this.prismaService.device.findFirst({\r\n      where: { deviceId: deviceId },\r\n    });\r\n    if (!device) {\r\n      throw new HttpException('Device not found', HttpStatus.NOT_FOUND);\r\n    }\r\n    return this.myGateSyncForDevice(device);\r\n  }\r\n\r\n  async myGateSyncForDeviceWithId(id: number) {\r\n    const device = await this.prismaService.device.findFirst({\r\n      where: { id: id },\r\n    });\r\n    if (!device) {\r\n      throw new HttpException('Device not found', HttpStatus.NOT_FOUND);\r\n    }\r\n    return this.myGateSyncForDevice(device);\r\n  }\r\n\r\n  async myGateSyncForDevice(device: Device) {\r\n    const { id, deviceId, lastSyncTimestamp } = device;\r\n    let page = 0;\r\n    let isAll = false;\r\n    const accessRefIdsInAll = [];\r\n    const flag = true;\r\n    while (flag) {\r\n      const myGateSyncResponse = await this.fetchSyncDataFromMyGate(\r\n        deviceId,\r\n        lastSyncTimestamp,\r\n        page\r\n      );\r\n      if (myGateSyncResponse.all) {\r\n        isAll = true;\r\n        for (const myGateSyncCard of myGateSyncResponse.all) {\r\n          accessRefIdsInAll.push(myGateSyncCard.access_ref_id);\r\n          await this.prismaService.myGateCard.upsert({\r\n            create: {\r\n              accessRefId: myGateSyncCard.access_ref_id,\r\n              accessUuid: myGateSyncCard.access_uuid,\r\n              accessUuidType: myGateSyncCard.access_uuid_type,\r\n              accessEntityType: myGateSyncCard.access_entity_type,\r\n              accessDisplay: myGateSyncCard.access_display,\r\n              deviceId: id,\r\n            },\r\n            update: {\r\n              accessUuid: myGateSyncCard.access_uuid,\r\n              accessUuidType: myGateSyncCard.access_uuid_type,\r\n              accessEntityType: myGateSyncCard.access_entity_type,\r\n              accessDisplay: myGateSyncCard.access_display,\r\n            },\r\n            where: {\r\n              deviceId_accessRefId: {\r\n                deviceId: id,\r\n                accessRefId: myGateSyncCard.access_ref_id,\r\n              },\r\n            },\r\n          });\r\n        }\r\n      }\r\n      if (myGateSyncResponse.upserted) {\r\n        for (const myGateSyncCard of myGateSyncResponse.upserted) {\r\n          await this.prismaService.myGateCard.upsert({\r\n            create: {\r\n              accessRefId: myGateSyncCard.access_ref_id,\r\n              accessUuid: myGateSyncCard.access_uuid,\r\n              accessUuidType: myGateSyncCard.access_uuid_type,\r\n              accessEntityType: myGateSyncCard.access_entity_type,\r\n              accessDisplay: myGateSyncCard.access_display,\r\n              deviceId: id,\r\n            },\r\n            update: {\r\n              accessUuid: myGateSyncCard.access_uuid,\r\n              accessUuidType: myGateSyncCard.access_uuid_type,\r\n              accessEntityType: myGateSyncCard.access_entity_type,\r\n              accessDisplay: myGateSyncCard.access_display,\r\n            },\r\n            where: {\r\n              deviceId_accessRefId: {\r\n                deviceId: id,\r\n                accessRefId: myGateSyncCard.access_ref_id,\r\n              },\r\n            },\r\n          });\r\n        }\r\n      }\r\n      if (myGateSyncResponse.deleted) {\r\n        await this.prismaService.myGateCard.deleteMany({\r\n          where: { accessRefId: { in: myGateSyncResponse.deleted } },\r\n        });\r\n      }\r\n      if (!myGateSyncResponse._links) {\r\n        break;\r\n      }\r\n      page++;\r\n    }\r\n    if (isAll) {\r\n      await this.prismaService.myGateCard.deleteMany({\r\n        where: {\r\n          deviceId: id,\r\n          accessRefId: {\r\n            notIn: accessRefIdsInAll,\r\n          },\r\n        },\r\n      });\r\n    }\r\n    console.log('Fetched MyGate cards for device', deviceId);\r\n  }\r\n\r\n  async fetchSyncDataFromMyGate(\r\n    deviceId: string,\r\n    lastSyncTimestamp: number,\r\n    page = 0\r\n  ) {\r\n    const url = `${MYGATE_API_URL}/access/v1/sync?device_id=${deviceId}&timestamp=${lastSyncTimestamp}&page=${page}`;\r\n    const r = await axios.get<MyGateSyncResponseDto>(url, {\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        'mg-xs-etype': 'VEHICLE',\r\n        'mg-xs-api-key': `${MYGATE_API_KEY}`,\r\n      },\r\n    });\r\n    return r.data;\r\n  }\r\n\r\n  @Cron(DEVICE_SYNC_CRON, {\r\n    name: 'deviceSyncMyGate',\r\n  })\r\n  async deviceSyncMyGate() {\r\n    try {\r\n      const devices = await this.prismaService.device.findMany({\r\n        where: { isMyGateDevice: true },\r\n        select: { id: true },\r\n      });\r\n      const deviceIds = devices.map((d) => d.id);\r\n      // TODO: implement workers\r\n      const promises: Promise<void>[] = [];\r\n      for (const deviceId of deviceIds) {\r\n        const promise = this.deviceSyncMyGateForDevice(deviceId);\r\n        promises.push(promise);\r\n      }\r\n      await Promise.all(promises);\r\n    } catch (e) {\r\n      Logger.log('deviceSync', e);\r\n    }\r\n  }\r\n\r\n  async deviceSyncMyGateForDevice(id: number) {\r\n    await this.prismaService\r\n      .$transaction(async (tx) => {\r\n        const device = await tx.device.findFirst({\r\n          where: { id: id },\r\n          include: {\r\n            deviceCards: true,\r\n            myGateCards: true,\r\n          },\r\n        });\r\n        const { deviceCards, myGateCards } = device;\r\n        const deviceCardsCardIds = deviceCards.map((c) => c.cardId);\r\n        const myGateCardsAccessDisplays = myGateCards.map(\r\n          (c) => c.accessDisplay\r\n        );\r\n        const toAdd = myGateCardsAccessDisplays.filter(\r\n          (c) => !deviceCardsCardIds.includes(c)\r\n        );\r\n        const toDelete = deviceCardsCardIds.filter(\r\n          (c) => !myGateCardsAccessDisplays.includes(c)\r\n        );\r\n        if (toAdd.length === 0 && toDelete.length === 0) {\r\n          return;\r\n        }\r\n        const toAddBatch =\r\n          toAdd.length > DEVICE_SYNC_BATCH_SIZE\r\n            ? toAdd.slice(0, DEVICE_SYNC_BATCH_SIZE)\r\n            : toAdd;\r\n        const toDeleteBatch =\r\n          toDelete.length > DEVICE_SYNC_BATCH_SIZE\r\n            ? toDelete.slice(0, DEVICE_SYNC_BATCH_SIZE)\r\n            : toDelete;\r\n        const syncToken = await this.sendDeviceSyncMessage(\r\n          device,\r\n          toAddBatch,\r\n          toDeleteBatch\r\n        );\r\n        const syncMessageCards: { cardId: string; status: 'ADD' | 'REMOVE' }[] =\r\n          toAddBatch\r\n            .map((c) => {\r\n              return { cardId: c, status: 'ADD' } as {\r\n                cardId: string;\r\n                status: 'ADD' | 'REMOVE';\r\n              };\r\n            })\r\n            .concat(\r\n              toDeleteBatch.map((c) => {\r\n                return { cardId: c, status: 'REMOVE' } as {\r\n                  cardId: string;\r\n                  status: 'ADD' | 'REMOVE';\r\n                };\r\n              })\r\n            );\r\n        await tx.syncMessage.create({\r\n          data: {\r\n            deviceId: id,\r\n            syncToken: syncToken,\r\n            cards: {\r\n              create: syncMessageCards,\r\n            },\r\n          },\r\n        });\r\n        console.log(\r\n          'Add sync message for device',\r\n          device.deviceId,\r\n          syncToken,\r\n          syncMessageCards\r\n        );\r\n      })\r\n      .catch((e) => {\r\n        Logger.log('deviceSyncMyGateForDevice', e);\r\n      });\r\n  }\r\n\r\n  async sendDeviceSyncMessage(\r\n    device: Device,\r\n    toAdd: string[],\r\n    toDelete: string[]\r\n  ) {\r\n    const syncToken = new Date().getTime();\r\n    const accessSyncDto: AccessSyncDto = {\r\n      st: String(syncToken),\r\n      na: toAdd.length,\r\n      a: toAdd,\r\n      nr: toDelete.length,\r\n      r: toDelete,\r\n      t: 'HTTP',\r\n      l: `${API_URL}/sync-ack/${device.deviceId}`,\r\n    };\r\n    await this.mainFluxService.connectAndPublishWithRetry(\r\n      accessSyncDto,\r\n      device.thingId,\r\n      device.thingKey,\r\n      device.channelId,\r\n      'mygate-sync'\r\n    );\r\n    console.log('Sent sync message to device', device.deviceId, accessSyncDto);\r\n    return String(syncToken);\r\n  }\r\n}\r\n","module.exports = require(\"@nestjs/schedule\");","import { Controller, Get, Param, Post, Render, UseGuards } from '@nestjs/common';\r\nimport { ApiOperation, ApiResponse, ApiTags } from '@nestjs/swagger';\r\nimport { MyGateService } from './mygate.service';\r\nimport { UserAuthGuard } from '../core/auth/user-auth.guard';\r\nimport { API_URL } from '../core/consts/env.consts';\r\n\r\n@ApiTags('mygate')\r\n@Controller('mygate')\r\nexport class MyGateController {\r\n  constructor(private myGateService: MyGateService) {}\r\n\r\n  // test api for tag sync check\r\n\r\n  @ApiOperation({\r\n    summary: 'mygate fontend application page route',\r\n  })\r\n  @ApiResponse({\r\n    status: 200,\r\n    description: 'Success',\r\n  })\r\n  @Render('index')\r\n  @Get()\r\n  async myGateFrontend() {\r\n   \r\n    return { API_URL: API_URL};\r\n  }\r\n\r\n\r\n  @UseGuards(UserAuthGuard)\r\n  @ApiOperation({\r\n    summary: 'Sync updates from MyGate and update the device state',\r\n  })\r\n  @ApiResponse({\r\n    status: 200,\r\n    description: 'Success',\r\n  })\r\n  @Post('sync')\r\n  myGateSync() {\r\n    return this.myGateService.myGateSync();\r\n  }\r\n\r\n\r\n  @UseGuards(UserAuthGuard)\r\n  @ApiOperation({\r\n    summary: 'Sync updates from MyGate and update the device state',\r\n  })\r\n  @ApiResponse({\r\n    status: 200,\r\n    description: 'Success',\r\n  })\r\n  @Post('sync/:deviceId')\r\n  myGateSyncForDeviceWithDeviceId(@Param('deviceId') deviceId: string) {\r\n    return this.myGateService.myGateSyncForDeviceWithDeviceId(deviceId);\r\n  }\r\n\r\n  \r\n  @UseGuards(UserAuthGuard)\r\n  @ApiOperation({\r\n    summary: 'Mygate Card state',\r\n  })\r\n  @ApiResponse({\r\n    status: 200,\r\n    description: 'Success',\r\n  })\r\n  @Get('card/:deviceId/:access_display')\r\n  mygateCardState(@Param('deviceId') deviceId: string,@Param('access_display') access_display: string) {\r\n    return this.myGateService.mygateCardState(deviceId,access_display);\r\n  }\r\n\r\n\r\n\r\n\r\n}\r\n","import { Module } from '@nestjs/common';\r\nimport { MyGateLogsController } from './mygate-logs.controller';\r\nimport { MyGateLogsService } from './mygate-logs.service';\r\nimport { PrismaClientMygateModule } from '@fnt-flsy/prisma-client-mygate';\r\nimport { MyGateModule } from '../mygate/mygate.module';\r\nimport { MyGateService } from '../mygate/mygate.service';\r\nimport { MainFluxModule } from '../mainflux/mainflux.module';\r\nimport { MainFluxService } from '../mainflux/mainflux.service';\r\nimport { AuthModule } from '../core/auth/auth.module';\r\nimport { ConfigService } from '@nestjs/config';\r\nimport { AuthService } from '../core/auth/auth.service';\r\nimport { JwtService } from '@nestjs/jwt';\r\n\r\n@Module({\r\n  imports: [PrismaClientMygateModule, MyGateModule, MainFluxModule, AuthModule],\r\n  controllers: [MyGateLogsController],\r\n  providers: [\r\n    MyGateLogsService,\r\n    JwtService,\r\n    MyGateService,\r\n    MainFluxService,\r\n    AuthService,\r\n    ConfigService,\r\n  ],\r\n})\r\nexport class MyGateLogsModule {}\r\n","import {\r\n  Controller,\r\n  Delete,\r\n  Get,\r\n  HttpCode,\r\n  HttpStatus,\r\n  Param,\r\n  Query,\r\n  Res,\r\n  UseGuards,\r\n} from '@nestjs/common';\r\nimport { MyGateLogsService } from './mygate-logs.service';\r\nimport { ApiOperation, ApiParam, ApiQuery, ApiResponse, ApiTags } from '@nestjs/swagger';\r\nimport { UserAuthGuard } from '../core/auth/user-auth.guard';\r\nimport { MyGateLogDto } from './dto/mygate-log.dto';\r\nimport * as xlsx from 'xlsx';\r\n\r\n@ApiTags('mygate-logs')\r\n@UseGuards(UserAuthGuard) \r\n@Controller('mygate-logs')\r\nexport class MyGateLogsController {\r\n  constructor(private myGateLogsService: MyGateLogsService) {}\r\n\r\n  @ApiOperation({summary: \"export residents data by society\"})\r\n  @ApiQuery({ name: 'deviceId', description: 'Device ID', type: String  ,required: true })\r\n  @ApiQuery({ name: 'from', description: 'from timestamp', type: Number,required: true })\r\n  @ApiQuery({ name: 'to', description: 'to timestamp', type: Number,required: true })\r\n  @Get('report')\r\n  @HttpCode(HttpStatus.OK)\r\n  async exportDeviceLogInExcel( \r\n  @Query('deviceId') deviceId: string,\r\n  @Query('from') fromDate: number,\r\n  @Query('to') toDate: number) {\r\n    const data = await this.myGateLogsService.getDataForDeviceLogInExcel(deviceId, +fromDate, +toDate);\r\n    return data\r\n  }\r\n\r\n  // TODO: add filters by device, by card, by time, by notification\r\n  @ApiOperation({ summary: 'Get all logs' })\r\n  @ApiResponse({ status: 200, description: 'Success', type: [MyGateLogDto] })\r\n  @Get()\r\n  getMyGateLogs(\r\n    @Query('myGateCardId') myGateCardId?: number\r\n  ): Promise<MyGateLogDto[]> {\r\n    return this.myGateLogsService.getMyGateLogs(\r\n      myGateCardId === undefined ? undefined : +myGateCardId\r\n    );\r\n  }\r\n\r\n\r\n  \r\n\r\n  @Get(':id')\r\n  getMyGateLog(@Param('id') id: number): Promise<MyGateLogDto> {\r\n    return this.myGateLogsService.getMyGateLog(+id);\r\n  }\r\n\r\n  @ApiOperation({ summary: 'Delete the log' })\r\n  @ApiParam({ name: 'id', type: 'number', description: 'Example ID: 1' })\r\n  @ApiResponse({ status: 204, description: 'Success', type: MyGateLogDto })\r\n  @HttpCode(HttpStatus.NO_CONTENT)\r\n  @Delete(':id')\r\n  deleteMyGateLog(@Param('id') id: number): Promise<MyGateLogDto> {\r\n    return this.myGateLogsService.deleteMyGateLog(+id);\r\n  }\r\n}\r\n","import { HttpException, HttpStatus, Injectable } from '@nestjs/common';\r\nimport { PrismaService } from '@fnt-flsy/prisma-client-mygate';\r\nimport { MyGateLogDto } from './dto/mygate-log.dto';\r\n\r\n@Injectable()\r\nexport class MyGateLogsService {\r\n  constructor(private prismaService: PrismaService) {}\r\n  async getDataForDeviceLogInExcel(deviceId: string,fromTimestamp: number, toTimestamp: number){\r\n    console.log(deviceId , fromTimestamp , toTimestamp)\r\n    const device = await  this.prismaService.device.findFirst({\r\n      where:{\r\n        deviceId: deviceId\r\n      }\r\n    })\r\n    if(!device) throw new HttpException('device not found',HttpStatus.NOT_FOUND);\r\n\r\n    console.log(device.id,fromTimestamp,toTimestamp);\r\n\r\n    const response : any= await this.prismaService.$queryRaw`\r\n    SELECT b.access_display, b.access_ref_id, a.timestamp, a.status, a.direction, a.mygate_response\r\n    FROM mygate_logs AS a\r\n    INNER JOIN mygate_cards AS b ON a.mygate_card_id = b.id\r\n    WHERE a.mygate_card_id IN (SELECT id FROM mygate_cards WHERE device_id = ${device.id})\r\n    AND a.created_at >= TO_TIMESTAMP(${fromTimestamp}) AND a.created_at <= TO_TIMESTAMP(${toTimestamp});\r\n    `\r\n\r\n    console.log(response);\r\n    return response;\r\n    \r\n  }\r\n\r\n  async getMyGateLogs(myGateCardId?: number): Promise<MyGateLogDto[]> {\r\n    return this.prismaService.myGateLog.findMany({\r\n      select: {\r\n        id: true,\r\n        timestamp: true,\r\n        status: true,\r\n        direction: true,\r\n        myGateCardId: true,\r\n      },\r\n      where: {\r\n        myGateCardId: myGateCardId,\r\n      },\r\n    });\r\n  }\r\n\r\n  async getMyGateLog(id: number): Promise<MyGateLogDto> {\r\n    const log = await this.prismaService.myGateLog.findFirst({\r\n      where: {\r\n        id: Number(id),\r\n      },\r\n    });\r\n    if (!log) {\r\n      throw new HttpException('MyGate log not found', HttpStatus.NOT_FOUND);\r\n    }\r\n    return log;\r\n  }\r\n\r\n  deleteMyGateLog(id: number) {\r\n    return this.prismaService.myGateLog.delete({\r\n      where: {\r\n        id: id,\r\n      },\r\n    });\r\n  }\r\n}\r\n","import { ApiProperty } from '@nestjs/swagger';\r\n\r\nexport class MyGateLogDto {\r\n  @ApiProperty() id: number;\r\n  @ApiProperty() timestamp: number;\r\n  @ApiProperty() status: string;\r\n  @ApiProperty() direction: string;\r\n  // TODO: add card and device info\r\n  @ApiProperty() myGateCardId: number;\r\n}\r\n","import { Module } from '@nestjs/common';\r\nimport { CommunicationController } from './communication.controller';\r\nimport { CommunicationService } from './communication.service';\r\nimport { PrismaClientMygateModule } from '@fnt-flsy/prisma-client-mygate';\r\nimport { MainFluxService } from '../mainflux/mainflux.service';\r\nimport { MyGateService } from '../mygate/mygate.service';\r\nimport { AuthService } from '../core/auth/auth.service';\r\nimport { ConfigService } from '@nestjs/config';\r\nimport { AuthModule } from '../core/auth/auth.module';\r\nimport { JwtService } from '@nestjs/jwt';\r\n\r\n@Module({\r\n  imports: [PrismaClientMygateModule],\r\n  controllers: [CommunicationController],\r\n  providers: [\r\n    CommunicationService,\r\n    MainFluxService,\r\n    MyGateService,\r\n    AuthService,\r\n    ConfigService,\r\n    JwtService,\r\n  ],\r\n})\r\nexport class CommunicationModule {}\r\n","import { Body, Controller, Get, Param, Post, UseGuards } from '@nestjs/common';\r\nimport { CommunicationService } from './communication.service';\r\nimport { AccessNotifyDto } from '../core/dto/access-notify.dto';\r\nimport { ApiBody, ApiOperation, ApiParam, ApiResponse } from '@nestjs/swagger';\r\nimport { AuthGuard } from '../core/auth/auth.guard';\r\nimport {\r\n  DateTimeForDeviceDto,\r\n  DeviceCredentialsResponseForDeviceDto,\r\n} from './dto/communication.dto';\r\nimport {AccessSyncDto} from \"../core/dto/access-sync.dto\";\r\nimport {AccessSyncAckDto} from \"../core/dto/access-sync-ack.dto\";\r\n\r\n@Controller()\r\nexport class CommunicationController {\r\n  constructor(private communicationService: CommunicationService) {}\r\n\r\n  @UseGuards(AuthGuard)\r\n  @ApiOperation({ summary: 'Notify the server with device log' })\r\n  @ApiParam({\r\n    name: 'deviceId',\r\n    type: 'string',\r\n    description: 'Example ID: fountlab_tag_01',\r\n  })\r\n  @ApiBody({ type: AccessNotifyDto })\r\n  @ApiResponse({ status: 201, description: 'Success' })\r\n  @Post('notify/:deviceId')\r\n  accessNotify(\r\n    @Param('deviceId') deviceId: string,\r\n    @Body() accessNotifyDto: AccessNotifyDto\r\n  ): Promise<{ success: boolean }> {\r\n    return this.communicationService.accessNotify(deviceId, accessNotifyDto);\r\n  }\r\n\r\n  @UseGuards(AuthGuard)\r\n  @ApiOperation({ summary: 'Get credentials for the device' })\r\n  @ApiParam({\r\n    name: 'deviceId',\r\n    type: 'string',\r\n    description: 'Example ID: fountlab_tag_01',\r\n  })\r\n  @ApiResponse({\r\n    status: 200,\r\n    description: 'Success',\r\n    type: DeviceCredentialsResponseForDeviceDto,\r\n  })\r\n  @Get('credentials/:deviceId')\r\n  getCredentials(\r\n    @Param('deviceId') deviceId: string\r\n  ): Promise<DeviceCredentialsResponseForDeviceDto> {\r\n    return this.communicationService.getCredentials(deviceId);\r\n  }\r\n\r\n  @ApiOperation({ summary: 'Get current time on the server' })\r\n  @ApiResponse({\r\n    status: 200,\r\n    description: 'Success',\r\n    type: DateTimeForDeviceDto,\r\n  })\r\n  @Get('time')\r\n  getTime(): Promise<DateTimeForDeviceDto> {\r\n    return this.communicationService.getTime();\r\n  }\r\n\r\n  @UseGuards(AuthGuard)\r\n  @ApiOperation({ summary: 'Api for device liveness' })\r\n  @ApiResponse({ status: 200, description: 'Success', type: Number })\r\n  @Get('i-am-here/:deviceId') // seconds in epoc\r\n  iAmHere(@Param('deviceId') deviceId: string) {\r\n    return this.communicationService.iAmHere(deviceId);\r\n  }\r\n\r\n  @ApiOperation({ summary: 'Publish the message on channel with mqtt' })\r\n  @ApiParam({\r\n    name: 'deviceId',\r\n    type: 'string',\r\n    description: 'Example ID: Aa23hk23',\r\n  })\r\n  @ApiBody({ type: AccessSyncDto })\r\n  @ApiResponse({ status: 201, description: 'Success' })\r\n  @Post('access-sync/:deviceId')\r\n  accessSync(\r\n    @Param('deviceId') deviceId: string,\r\n    @Body() accessSyncDto: AccessSyncDto,\r\n  ) {\r\n    return this.communicationService.accessSync(deviceId, accessSyncDto);\r\n  }\r\n\r\n  @UseGuards(AuthGuard)\r\n  @Post('sync-ack/:deviceId')\r\n  accessSyncAck(@Param('deviceId') deviceId: string, @Body() accessSyncAckDto: AccessSyncAckDto){\r\n    return this.communicationService.accessSyncAck(deviceId, accessSyncAckDto);\r\n  }\r\n}\r\n","import { HttpException, HttpStatus, Injectable, Logger } from '@nestjs/common';\r\nimport { Prisma, PrismaService } from '@fnt-flsy/prisma-client-mygate';\r\nimport { MainFluxService } from '../mainflux/mainflux.service';\r\nimport { MyGateService } from '../mygate/mygate.service';\r\nimport { AccessNotifyDto } from '../core/dto/access-notify.dto';\r\nimport {\r\n  API_URL,\r\n  DEVICE_SYNC_CRON,\r\n  MQTT_DOMAIN_MYGATE,\r\n  MQTT_PORT_MYGATE,\r\n} from '../core/consts/env.consts';\r\nimport { DateTimeForDeviceDto } from './dto/communication.dto';\r\nimport { AccessSyncDto } from '../core/dto/access-sync.dto';\r\nimport { AccessSyncAckDto } from '../core/dto/access-sync-ack.dto';\r\nimport { Cron } from '@nestjs/schedule';\r\nimport * as mqtt from 'mqtt';\r\n\r\n\r\n@Injectable()\r\nexport class CommunicationService {\r\n  constructor(\r\n    private prismaService: PrismaService,\r\n    private mainFluxService: MainFluxService,\r\n    private myGateService: MyGateService\r\n  ) { }\r\n  private connections: Map<string, any> = new Map();\r\n\r\n  @Cron(DEVICE_SYNC_CRON, {\r\n    name: 'deviceSyncMQTT',\r\n  })\r\n  async deviceSyncMQTT() {\r\n    try {\r\n      const devices = await this.prismaService.device.findMany({});\r\n      const toBeAdded = devices.filter((c) => !this.connections.has(c.thingId));\r\n      console.log(\"toBe added .. :  \", toBeAdded);\r\n\r\n      // TODO: implement workers\r\n\r\n      for (const device of toBeAdded) {\r\n        await this.addNewConnection(device.thingId, device.thingKey, device.channelId, `channels/${device.channelId}/messages/unique`)\r\n      }\r\n\r\n    } catch (e) {\r\n      Logger.log('deviceSync', e);\r\n    }\r\n  }\r\n\r\n\r\n  async addNewConnection(\r\n    thingId: string,\r\n    thingKey: string,\r\n    channelId: string,\r\n    topicName: string\r\n  ) {\r\n    const clientId = `mqtt_${Math.random().toString(16).slice(3)}`;\r\n    const mqttOptions = {\r\n      clientId,\r\n      clean: true,\r\n      connectTimeout: 4000,\r\n      username: thingId,\r\n      password: thingKey,\r\n      reconnectPeriod: 1000,\r\n\r\n      // additional options can be added here\r\n    };\r\n\r\n    // Connect to the MQTT broker\r\n    const client = mqtt.connect(`mqtt://${MQTT_DOMAIN_MYGATE}:${MQTT_PORT_MYGATE}`, mqttOptions);\r\n    const subscriptionTopic = `channels/${channelId}/messages/mygate-notify`;\r\n\r\n    // Handle incoming messages\r\n    client.on('message', async (topic, message) => {\r\n      const topic_res = topic.split(\"/\")\r\n      console.log(topic_res);\r\n      console.log(`Received message on ${topic}: ${message.toString()}`); // Log the received message\r\n\r\n      const channel_id = topic_res[1];\r\n\r\n      const notifyTopic = topic_res[3];\r\n\r\n      console.log(notifyTopic);\r\n\r\n      const deviceToPublish = await this.prismaService.device.findFirst({\r\n        where: {\r\n          channelId: channel_id\r\n        }\r\n      })\r\n\r\n\r\n      if (notifyTopic === 'mygate-notify') {\r\n        const publishedMessage = message.toString();\r\n        try {\r\n          const deviceMessage: AccessNotifyDto = JSON.parse(publishedMessage);\r\n\r\n          console.log(deviceMessage);\r\n\r\n          if ('ci' in deviceMessage && 'ts' in deviceMessage && 'st' in deviceMessage && 'dr' in deviceMessage) {\r\n            await this.accessNotify(deviceToPublish.deviceId, deviceMessage);\r\n          } else {\r\n            console.log(\"just displaying the message: \", deviceMessage);\r\n          }\r\n          \r\n        } catch (error) {\r\n          console.log(error);\r\n        }\r\n      }\r\n    });\r\n\r\n\r\n\r\n    // Subscribe to the specified topic\r\n    client.on('connect', () => {\r\n      client.subscribe(subscriptionTopic, (err) => {\r\n        if (err) {\r\n          Logger.error(`Error while subscribing to ${subscriptionTopic}: ${err}`);\r\n        } else {\r\n          Logger.log(`Subscribed to ${subscriptionTopic} for thingId: ${thingId}`);\r\n        }\r\n      });\r\n    });\r\n\r\n    // Store the connection in the map\r\n    this.connections.set(thingId, client);\r\n  }\r\n\r\n\r\n  // Function to disconnect from the MQTT broker\r\n  disconnect() {\r\n    this.connections.forEach((client) => {\r\n      client.end();\r\n    });\r\n    this.connections.clear();\r\n  }\r\n\r\n\r\n\r\n  async accessNotify(deviceId: string, accessNotifyDto: AccessNotifyDto) {\r\n    // get device by device id\r\n    const device = await this.prismaService.device.findFirst({\r\n      where: {\r\n        deviceId: deviceId,\r\n      },\r\n    });\r\n    if (!device) {\r\n      throw new HttpException('Device not found', HttpStatus.NOT_FOUND);\r\n    }\r\n\r\n\r\n    // TODO: maintain MQTT status\r\n\r\n    //.....\r\n    // const isPublishedToMqtt = await this.mainFluxService.publishNotifyToMqtt(\r\n    //   accessNotifyDto,\r\n    //   deviceId,\r\n    //   device.thingId,\r\n    //   device.thingKey,\r\n    //   device.channelId\r\n    // );\r\n    //......\r\n\r\n    // if (!isPublishedToMqtt) {\r\n    //   // TODO: maintain publish status\r\n    //   console.error(`Could not publish to MQTT`, accessNotifyDto);\r\n    // }\r\n\r\n    if (!device.isMyGateDevice) {\r\n      return { success: true };\r\n    }\r\n\r\n    // get card by access display\r\n    const myGateCard = await this.prismaService.myGateCard.findFirst({\r\n      where: {\r\n        accessDisplay: accessNotifyDto.ci,\r\n        deviceId: device.id\r\n      },\r\n    });\r\n    if (!myGateCard) {\r\n      throw new HttpException('MyGate card not found', HttpStatus.NOT_FOUND);\r\n    }\r\n\r\n    let myGateNotifyResponse;\r\n    let isNotified = false;\r\n    let isNotifiedSuccessfully = false;\r\n    let response_timestamp;\r\n\r\n    try {\r\n      // call MyGate notify\r\n      myGateNotifyResponse = await this.myGateService.myGateNotify({\r\n        device_id: device.deviceId,\r\n        access_uuid_type: myGateCard.accessUuidType,\r\n        access_entity_type: myGateCard.accessEntityType,\r\n        access_ref_id: myGateCard.accessRefId,\r\n        access_uuid_captured: accessNotifyDto.ci,\r\n        direction: accessNotifyDto.dr,\r\n        status: accessNotifyDto.st,\r\n        timestamp: String(accessNotifyDto.ts),\r\n      });\r\n\r\n      isNotified = true;\r\n      isNotifiedSuccessfully = myGateNotifyResponse.data.es == '0' && myGateNotifyResponse.data.message.toUpperCase() === 'Success'.toUpperCase();\r\n      response_timestamp = new Date();\r\n\r\n\r\n\r\n    } catch (error) {\r\n      console.log('error while notifying to mygate , ', error)\r\n    }\r\n\r\n\r\n\r\n    console.log(\r\n      'Published notification to MyGate from device',\r\n      deviceId,\r\n      accessNotifyDto\r\n    );\r\n    console.log(\"MyGate Response \", myGateNotifyResponse?.data)\r\n\r\n\r\n    const log = await this.prismaService.myGateLog.create({\r\n      data: {\r\n        timestamp: Number(accessNotifyDto.ts),\r\n        status: accessNotifyDto.st,\r\n        direction: accessNotifyDto.dr,\r\n        myGateCardId: myGateCard.id,\r\n        isNotifiedToMyGate: isNotified,\r\n        myGateResponse: isNotified == true ? myGateNotifyResponse?.data : null,\r\n        myGateResponseTimestamp: isNotified == true ? response_timestamp : null,\r\n        isNotifiedToMyGateSuccessfully: isNotifiedSuccessfully\r\n      },\r\n    });\r\n    if (!log) throw new HttpException(\"internal server error while creating log\", HttpStatus.INTERNAL_SERVER_ERROR);\r\n\r\n    console.log(\r\n      'Received MyGate notification from device',\r\n      deviceId,\r\n      accessNotifyDto\r\n    );\r\n    console.log('success notification with typeof ', myGateNotifyResponse?.data)\r\n    return {\r\n      success: true,\r\n    };\r\n\r\n  }\r\n\r\n  async getCredentials(deviceId: string) {\r\n    const deviceResponse = await this.prismaService.device.findFirst({\r\n      where: {\r\n        deviceId: deviceId,\r\n      },\r\n    });\r\n    if (!deviceResponse) {\r\n      throw new HttpException('Device not found', HttpStatus.NOT_FOUND);\r\n    }\r\n    return {\r\n      status: true,\r\n      resp: {\r\n        imei: deviceId,\r\n        clientid: deviceResponse.channelId,\r\n        username: deviceResponse.thingId,\r\n        password: deviceResponse.thingKey,\r\n        broker: MQTT_DOMAIN_MYGATE,\r\n        port: MQTT_PORT_MYGATE,\r\n        notify: API_URL + `/notify/${deviceId}`,\r\n      },\r\n    };\r\n  }\r\n\r\n  async getTime(): Promise<DateTimeForDeviceDto> {\r\n    // TODO: handle time zone\r\n    const now = new Date();\r\n    return {\r\n      status: true,\r\n      datetime: {\r\n        day: now.getDate(),\r\n        month: now.getMonth() + 1, // Month is 0-based, so we add 1 to get the correct month\r\n        year: now.getFullYear() - 2000, // Subtract 2000 to get the two-digit year representation\r\n        hour: now.getHours(),\r\n        min: now.getMinutes(),\r\n        sec: now.getSeconds(),\r\n      },\r\n    };\r\n  }\r\n\r\n  async iAmHere(deviceId: string) {\r\n    const device = await this.prismaService.device.findFirst({\r\n      where: {\r\n        deviceId: String(deviceId),\r\n      },\r\n    });\r\n    if (!device) {\r\n      throw new HttpException('Device not found', HttpStatus.NOT_FOUND);\r\n    }\r\n    return this.prismaService.iAmHereLog.create({\r\n      data: {\r\n        deviceId: device.id,\r\n      },\r\n    });\r\n  }\r\n\r\n  // utility method\r\n  async accessSync(deviceId: string, accessSyncDto: AccessSyncDto) {\r\n    const device = await this.prismaService.device.findFirst({\r\n      where: { deviceId: deviceId },\r\n    });\r\n    if (!device) {\r\n      throw new HttpException('Device not found', HttpStatus.NOT_FOUND);\r\n    }\r\n    return this.mainFluxService.connectAndPublishWithRetry(\r\n      accessSyncDto,\r\n      device.thingId,\r\n      device.thingKey,\r\n      device.channelId,\r\n      'mygate-sync'\r\n    );\r\n  }\r\n\r\n  async accessSyncAck(deviceId: string, accessSyncAckDto: AccessSyncAckDto) {\r\n    let id: number;\r\n    let isMyGateDevice = false;\r\n    console.log('Received sync ack from device', deviceId, accessSyncAckDto);\r\n    await this.prismaService.$transaction(async (tx) => {\r\n      const device = await tx.device.findFirst({\r\n        where: { deviceId: deviceId },\r\n      });\r\n      if (!device) {\r\n        throw new HttpException('Device not found', HttpStatus.NOT_FOUND);\r\n      }\r\n      id = device.id;\r\n      isMyGateDevice = device.isMyGateDevice;\r\n      const syncMessage = await tx.syncMessage.findFirst({\r\n        where: {\r\n          deviceId: device.id,\r\n          syncToken: accessSyncAckDto.st,\r\n        },\r\n        include: {\r\n          cards: true,\r\n        },\r\n      });\r\n      if (!syncMessage) {\r\n        throw new HttpException('Sync message not found', HttpStatus.NOT_FOUND);\r\n      }\r\n      const cards = syncMessage.cards;\r\n      const addedCards = cards\r\n        .filter((c) => c.status === 'ADD')\r\n        .map((c) => c.cardId);\r\n      const removedCards = cards\r\n        .filter((c) => c.status === 'REMOVE')\r\n        .map((c) => c.cardId);\r\n      for (const addedCard of addedCards) {\r\n        await tx.deviceCard.upsert({\r\n          create: {\r\n            deviceId: device.id,\r\n            cardId: addedCard,\r\n          },\r\n          update: {},\r\n          where: {\r\n            deviceId_cardId: {\r\n              deviceId: device.id,\r\n              cardId: addedCard,\r\n            },\r\n          },\r\n        });\r\n      }\r\n      await tx.deviceCard.deleteMany({\r\n        where: {\r\n          deviceId: device.id,\r\n          cardId: {\r\n            in: removedCards,\r\n          },\r\n        },\r\n      });\r\n      await tx.syncMessageCard.deleteMany({\r\n        where: {\r\n          syncMessageId: syncMessage.id,\r\n        },\r\n      });\r\n      await tx.syncMessage.delete({\r\n        where: {\r\n          id: syncMessage.id,\r\n        },\r\n      });\r\n    });\r\n    console.log('Processed sync ack from device', deviceId, accessSyncAckDto);\r\n    // TODO: implement worker\r\n    if (isMyGateDevice) {\r\n      await this.myGateService.deviceSyncMyGateForDevice(id);\r\n    }\r\n    return { status: 'ok' };\r\n  }\r\n}","import { ApiProperty } from '@nestjs/swagger';\r\n\r\nexport class AccessNotifyDto {\r\n  @ApiProperty() ci: string; //cardId\r\n  @ApiProperty() ts: string; //timestamp\r\n  @ApiProperty() st: string; //status\r\n  @ApiProperty() dr: string; //direction\r\n}\r\n","import { ApiProperty } from '@nestjs/swagger';\r\n\r\nexport class DeviceCredentialsResponseDto {\r\n  @ApiProperty() imei: string;\r\n  @ApiProperty() clientid: string;\r\n  @ApiProperty() username: string;\r\n  @ApiProperty() password: string;\r\n  @ApiProperty() broker: string;\r\n  @ApiProperty() port: string;\r\n  @ApiProperty() notify: string;\r\n}\r\n\r\nexport class DeviceCredentialsResponseForDeviceDto {\r\n  @ApiProperty() 'status': boolean;\r\n  @ApiProperty() resp: DeviceCredentialsResponseDto;\r\n}\r\n\r\nexport class DateTimeDto {\r\n  @ApiProperty() day: number;\r\n  @ApiProperty() month: number; // Month is 0-based, so we add 1 to get the correct month\r\n  @ApiProperty() year: number; // Subtract 2000 to get the two-digit year representation\r\n  @ApiProperty() hour: number;\r\n  @ApiProperty() min: number;\r\n  @ApiProperty() sec: number;\r\n}\r\n\r\nexport class DateTimeForDeviceDto {\r\n  @ApiProperty() status: boolean;\r\n  @ApiProperty() datetime: DateTimeDto;\r\n}\r\n","import { ApiProperty } from '@nestjs/swagger';\r\n\r\nexport class AccessSyncDto {\r\n  @ApiProperty() st: string;\r\n  @ApiProperty() na: number;\r\n  @ApiProperty() a: string[];\r\n  @ApiProperty() nr: number;\r\n  @ApiProperty() r: string[];\r\n  @ApiProperty() t: string;\r\n  @ApiProperty() l: string;\r\n}\r\n","import { ApiProperty } from '@nestjs/swagger';\r\n\r\nexport class AccessSyncAckDto {\r\n  @ApiProperty() st: string;\r\n  @ApiProperty() status: boolean;\r\n}\r\n","import { Module } from \"@nestjs/common\";\r\nimport { userController } from \"./user.controller\";\r\nimport { UserService } from \"./user.service\";\r\nimport { AuthModule } from \"../core/auth/auth.module\";\r\nimport { AuthService } from \"../core/auth/auth.service\";\r\nimport { ConfigService } from \"@nestjs/config\";\r\nimport { PrismaService } from \"@fnt-flsy/prisma-client-mygate\";\r\nimport { JwtService } from \"@nestjs/jwt\";\r\n\r\n\r\n@Module({\r\n    imports:[],\r\n    providers:[UserService,ConfigService,PrismaService,AuthService,JwtService ],\r\n    controllers:[userController]\r\n})\r\n\r\nexport class  UserModule{} ","import { Body, Controller, Post, UseGuards } from \"@nestjs/common\";\r\nimport { ApiOperation, ApiResponse, ApiTags } from \"@nestjs/swagger\";\r\nimport { UserSignInDTO, UserSignUpDTO } from \"./dto/user.dto\";\r\nimport { UserService } from \"./user.service\";\r\nimport { AuthGuard } from \"../core/auth/auth.guard\";\r\nimport { UserAuthGuard } from \"../core/auth/user-auth.guard\";\r\n\r\n@ApiTags('user')\r\n@Controller('user')\r\nexport class userController{\r\n    constructor(\r\n        private userService : UserService\r\n    ){}\r\n\r\n    @ApiOperation({\r\n        summary:'create new user'\r\n    })\r\n    @ApiResponse({\r\n        status:200,\r\n        description :'Success',\r\n    })\r\n\r\n    @Post('signup')\r\n    userSignup(@Body() SignUpBody:UserSignUpDTO){\r\n        return this.userService.UserSignup(SignUpBody);\r\n    }\r\n\r\n\r\n\r\n    @ApiOperation({\r\n        summary:'SignIn user'\r\n    })\r\n    @ApiResponse({\r\n        status:200,\r\n        description :'Success',\r\n    })\r\n\r\n    @Post('signin')\r\n    // @UseGuards(UserAuthGuard)\r\n    // @UseGuards(UserAuthGuard)\r\n    userSignin(@Body() SignInBody:UserSignInDTO){\r\n        return this.userService.UserSignIn(SignInBody);\r\n    }\r\n\r\n}","import { IsEmail, IsNotEmpty, IsString } from \"class-validator\"\r\n\r\n\r\nexport class UserSignUpDTO{\r\n    @IsEmail()\r\n    @IsNotEmpty()\r\n    email : string;\r\n\r\n    \r\n    phoneNumber? : string;\r\n    \r\n    @IsString()\r\n    @IsNotEmpty()\r\n    firstName : string;\r\n    \r\n    @IsString()\r\n    @IsNotEmpty()\r\n    lastName : string;\r\n    \r\n    isActive : boolean;\r\n    @IsString()\r\n    @IsNotEmpty()\r\n    password :string;\r\n}\r\n\r\n\r\nexport class UserSignInDTO{\r\n    @IsEmail()\r\n    @IsNotEmpty()\r\n    email : string;\r\n\r\n    @IsString()\r\n    @IsNotEmpty()\r\n    password :string;\r\n}","module.exports = require(\"class-validator\");","\r\nimport { UserSignInDTO, UserSignUpDTO } from \"./dto/user.dto\";\r\nimport { PrismaService } from \"@fnt-flsy/prisma-client-mygate\";\r\nimport { AuthService } from \"../core/auth/auth.service\";\r\nimport { PrismaClientKnownRequestError } from \"@prisma/client/runtime/library\";\r\nimport { ForbiddenException, Injectable } from \"@nestjs/common\";\r\nimport { HttpStatus } from '@nestjs/common';\r\n\r\n@Injectable()\r\nexport class UserService{\r\n    constructor(\r\n        private prisma: PrismaService,\r\n        private authService : AuthService\r\n    ){}\r\n\r\n\r\n    async UserSignup(SignUpBody: UserSignUpDTO){\r\n        const hash = await this.authService.hashPassword(SignUpBody.password);\r\n        try{\r\n            const user = await this.prisma.user.create({\r\n                data:{\r\n                    email: SignUpBody.email,\r\n                    firstName : SignUpBody.firstName,\r\n                    lastName : SignUpBody.lastName,\r\n                    isActive: true,\r\n                    password: hash,\r\n                }\r\n            })\r\n\r\n            return {\r\n                status : HttpStatus.CREATED\r\n            }\r\n\r\n        }catch(error){\r\n            if(error instanceof PrismaClientKnownRequestError){\r\n                if(error.code ==='P0002'){\r\n                    throw new ForbiddenException('User Already Exist with same credentials');\r\n                }\r\n            }\r\n            throw error;\r\n        }\r\n    }\r\n\r\n\r\n    async UserSignIn(SignInBody :UserSignInDTO) {\r\n        console.log(SignInBody)\r\n        try {\r\n            const user = await this.prisma.user.findUnique({\r\n                where: {\r\n                    email: SignInBody.email\r\n                }\r\n            });\r\n    \r\n            if (!user) {\r\n                throw new ForbiddenException(\"Credentials Incorrect\");\r\n            }\r\n            // console.log(SignInBody.password, user.password)\r\n            const pwMatch = await this.authService.comparePasswords(SignInBody.password, user.password);\r\n    \r\n            if (!pwMatch) {\r\n                throw new ForbiddenException(\"Password Incorrect!\");\r\n            }\r\n            \r\n            // console.log(user.id , user.email)\r\n            return this.authService.createToken(user.firstName, user.email);\r\n        } catch (error) {\r\n            throw error; \r\n    }\r\n    \r\n}\r\n}\r\n\r\n","module.exports = require(\"@prisma/client/runtime/library\");","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","import { Logger } from '@nestjs/common';\r\nimport { NestFactory } from '@nestjs/core';\r\nimport { NestExpressApplication } from '@nestjs/platform-express';\r\nimport { join } from 'path';\r\n\r\nimport { SwaggerModule, DocumentBuilder } from '@nestjs/swagger';\r\nimport { AppModule } from './app/app.module';\r\nimport { PORT } from './app/core/consts/env.consts';\r\n\r\nasync function bootstrap() {\r\n  const app = await NestFactory.create<NestExpressApplication>(AppModule);\r\n  const port = PORT || 3005;\r\n\r\n  const config = new DocumentBuilder()\r\n    .setTitle('FountLab Flux MyGate API')\r\n    .setDescription('FountLab Flux MyGate API')\r\n    .setVersion('1.0')\r\n    .addTag('mygate')\r\n    .build();\r\n  const document = SwaggerModule.createDocument(app, config);\r\n  SwaggerModule.setup('swagger', app, document);\r\n\r\n  app.enableCors();\r\n\r\n  app.useStaticAssets(join(__dirname, '..','..','..','dist','mygate-ui'));\r\n  app.setBaseViewsDir(join(__dirname, '..','..','..','apps','api-mygate','src','assets', 'views'));\r\n  app.setViewEngine('hbs');\r\n\r\n  await app.listen(port);\r\n  Logger.log(`🚀 Application is running on: http://localhost:${port}`);\r\n}\r\n\r\nbootstrap();\r\n"],"names":[],"sourceRoot":""}